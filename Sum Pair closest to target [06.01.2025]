#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

class Solution {
public:
    std::vector<int> sumClosest(std::vector<int>& arr, int target) {
        std::sort(arr.begin(), arr.end());
        std::vector<int> ans;
        int st = 0, end = arr.size() - 1, currClose = INT_MAX;
        while (st < end) {
            int sum = arr[st] + arr[end];
            if (std::abs(target - sum) < currClose) {
                currClose = std::abs(target - sum);
                ans.clear();
                ans.push_back(arr[st]);
                ans.push_back(arr[end]);
            }
            if (sum < target) {
                st++;
            } else if (sum > target) {
                end--;
            } else {
                return ans;
            }
        }
        return ans;
    }
};

int suvam() {
    Solution ob;
    std::vector<int> arr = {1, 2, 3, 4, 5};
    int target = 7;
    std::vector<int> ans = ob.sumClosest(arr, target);
    for (int num : ans) {
        std::cout << num << " ";
    }
    return 0;
}
