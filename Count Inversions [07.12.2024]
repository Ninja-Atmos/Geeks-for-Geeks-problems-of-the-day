#include <iostream>
#include <vector>

class Solution {
public:
    int mergeAndCount(std::vector<int>& arr, int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;
        std::vector<int> leftArr(n1);
        std::vector<int> rightArr(n2);

        for (int i = 0; i < n1; ++i)
            leftArr[i] = arr[left + i];
        for (int i = 0; i < n2; ++i)
            rightArr[i] = arr[mid + 1 + i];

        int i = 0, j = 0, k = left, invCount = 0;
        while (i < n1 && j < n2) {
            if (leftArr[i] <= rightArr[j]) {
                arr[k++] = leftArr[i++];
            } else {
                arr[k++] = rightArr[j++];
                invCount += (n1 - i);
            }
        }

        while (i < n1)
            arr[k++] = leftArr[i++];
        while (j < n2)
            arr[k++] = rightArr[j++];

        return invCount;
    }

    int mergeSortAndCount(std::vector<int>& arr, int left, int right) {
        int invCount = 0;
        if (left < right) {
            int mid = left + (right - left) / 2;
            invCount += mergeSortAndCount(arr, left, mid);
            invCount += mergeSortAndCount(arr, mid + 1, right);
            invCount += mergeAndCount(arr, left, mid, right);
        }
        return invCount;
    }

    int inversionCount(std::vector<int>& arr) {
        return mergeSortAndCount(arr, 0, arr.size() - 1);
    }
};

int suvam() {
    Solution sol;
    std::vector<int> arr = {2, 4, 1, 3, 5};
    std::cout << sol.inversionCount(arr) << std::endl; // Output: 3

    arr = {2, 3, 4, 5, 6};
    std::cout << sol.inversionCount(arr) << std::endl; // Output: 0

    arr = {10, 10, 10};
    std::cout << sol.inversionCount(arr) << std::endl; // Output: 0

    return 0;
}
