#include <iostream>
#include<vector>

class Solution {
public:
    int search(const std::vector<int>& nums, int target) {
        int left = 0, right = nums.size() - 1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (nums[mid] == target) {
                return mid;
            }
            
            // Check if the left half is sorted
            if (nums[left] <= nums[mid]) {
                if (nums[left] <= target && target < nums[mid]) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            }
            // Otherwise, the right half must be sorted
            else {
                if (nums[mid] < target && target <= nums[right]) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }
        
        return -1;
    }
};

int suvam() {
    Solution sol;
    std::vector<int> arr = {5, 6, 7, 8, 9, 10, 1, 2, 3};
    int key = 3;
    std::cout << sol.search(arr, key) << std::endl; // Output: 8

    arr = {3, 5, 1, 2};
    key = 6;
    std::cout << sol.search(arr, key) << std::endl; // Output: -1

    arr = {33, 42, 72, 99};
    key = 42;
    std::cout << sol.search(arr, key) << std::endl; // Output: 1

    return 0;
}
